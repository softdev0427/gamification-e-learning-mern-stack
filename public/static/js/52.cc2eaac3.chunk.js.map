{"version":3,"sources":["views/auth/RegisterView/RegisterForm.js","views/auth/RegisterView/index.js"],"names":["useStyles","makeStyles","root","RegisterForm","className","rest","onSubmitSuccess","classes","enqueueSnackbar","useSnackbar","initialValues","username","location","email","password","passwordCheck","role","validationSchema","Yup","shape","max","required","min","onSubmit","values","a","setErrors","setStatus","setSubmitting","success","AuthService","register","data","message","variant","submit","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","clsx","TextField","error","Boolean","fullWidth","helperText","label","margin","name","onBlur","onChange","type","value","select","SelectProps","native","Box","mt","Button","color","disabled","size","default","theme","justifyContent","backgroundColor","palette","background","dark","display","height","minHeight","flexDirection","paddingBottom","paddingTop","RegisterView","history","useHistory","Page","title","Container","maxWidth","mb","alignItems","to","Logo","component","RouterLink","backButton","Card","CardContent","Typography","gutterBottom","push","my","Divider","Link"],"mappings":"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","file":"static/js/52.cc2eaac3.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Button,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport AuthService from 'src/services/authService';\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nfunction RegisterForm({ className, onSubmitSuccess, ...rest }) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        location:'',\n        email: '',\n        password: '',\n        passwordCheck: '',\n        role:'learner'\n      }}\n      validationSchema={Yup.object().shape({\n        username: Yup.string().max(255).required('user name is required'),\n        location: Yup.string().max(255).required('location is required'),\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().min(5).max(255).required('Password is required'),\n        passwordCheck: Yup.string().min(5).max(255).required('confirm Password is required')\n      })}\n      onSubmit={async (values, {\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          // Make API request\n          setStatus({ success: true });\n          setSubmitting(false);\n          const data =  await AuthService.register(values);\n          if(data.success)\n          {\n            enqueueSnackbar(data.message, {\n            variant: 'success',\n          });    }\n          else {\n            enqueueSnackbar(data.message, {\n              variant: 'error'\n            }); \n          }\n        \n          // onSubmitSuccess();\n        } catch (error) {\n          setStatus({ success: false });\n          setErrors({ submit: error.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        touched,\n        values\n      }) => (\n        <form\n          className={clsx(classes.root, className)}\n          onSubmit={handleSubmit}\n          {...rest}\n        >\n          <TextField\n            error={Boolean(touched.username && errors.username)}\n            fullWidth\n            helperText={touched.username && errors.username}\n            label=\"User name\"\n            margin=\"normal\"\n            name=\"username\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"username\"\n            value={values.username}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.location && errors.location)}\n            fullWidth\n            helperText={touched.location && errors.location}\n            label=\"Location(country or city)\"\n            margin=\"normal\"\n            name=\"location\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"location\"\n            value={values.location}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.email && errors.email)}\n            fullWidth\n            helperText={touched.email && errors.email}\n            label=\"Email Address\"\n            margin=\"normal\"\n            name=\"email\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"email\"\n            value={values.email}\n            variant=\"outlined\"\n          />\n          <TextField\n            error={Boolean(touched.password && errors.password)}\n            fullWidth\n            helperText={touched.password && errors.password}\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n            <TextField\n            error={Boolean(touched.passwordCheck && errors.passwordCheck)}\n            fullWidth\n            helperText={touched.passwordCheck && errors.passwordCheck}\n            label=\"Confirm Password\"\n            margin=\"normal\"\n            name=\"passwordCheck\"\n            onBlur={handleBlur}\n            onChange={handleChange}\n            type=\"password\"\n            value={values.passwordCheck}\n            variant=\"outlined\"\n          />\n            <TextField\n            fullWidth\n              label=\"Select Role\"\n              name=\"role\"\n              margin=\"normal\"\n              select\n              onChange={handleChange}\n              SelectProps={{ native: true }}\n              value={values.role}\n              variant=\"outlined\"\n            >\n                <option\n                  value=\"learner\"\n                >\n                  Learner\n                </option>\n                <option\n                  value=\"lecturer\"\n                >\n                  Lecturer\n                </option>\n                <option\n                  value=\"admin\"\n                >\n                  Admin\n                </option>\n\n            </TextField>\n          <Box mt={2}>\n            <Button\n              color=\"secondary\"\n              disabled={isSubmitting}\n              fullWidth\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Register\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n}\n\nRegisterForm.propTypes = {\n  className: PropTypes.string,\n  onSubmitSuccess: PropTypes.func\n};\n\nRegisterForm.default = {\n  onSubmitSuccess: () => {}\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Container,\n  Divider,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Logo from 'src/components/Logo';\nimport RegisterForm from './RegisterForm';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    justifyContent: 'center',\n    backgroundColor: theme.palette.background.dark,\n    display: 'flex',\n    height: '100%',\n    minHeight: '100%',\n    flexDirection: 'column',\n    paddingBottom: 80,\n    paddingTop: 80\n  }\n}));\n\nfunction RegisterView() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmitSuccess = () => {\n    history.push('/app/login');\n  };\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Register\"\n    >\n      <Container maxWidth=\"sm\">\n        <Box\n          mb={5}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <RouterLink to=\"/\">\n            <Logo />\n          </RouterLink>\n          <Button\n            component={RouterLink}\n            to=\"/\"\n            className={classes.backButton}\n          >\n            Back to home\n          </Button>\n        </Box>\n        <Card>\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h2\"\n              color=\"textPrimary\"\n            >\n              Sign up\n            </Typography>\n            <Typography variant=\"subtitle1\">\n              Sign up on gamified E-learning site\n            </Typography>\n            <Box mt={3}>\n              <RegisterForm onSubmitSuccess={handleSubmitSuccess} />\n            </Box>\n            <Box my={2}>\n              <Divider />\n            </Box>\n            <Link\n              component={RouterLink}\n              to=\"/login\"\n              variant=\"body2\"\n              color=\"textSecondary\"\n            >\n              Have an account?\n            </Link>\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n}\n\nexport default RegisterView;\n"],"sourceRoot":""}