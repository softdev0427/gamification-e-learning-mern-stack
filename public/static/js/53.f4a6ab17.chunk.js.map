{"version":3,"sources":["views/courses/chat/Sidebar/Toolbar.js","views/courses/chat/Sidebar/ThreadList/index.js","views/courses/chat/Sidebar/index.js","views/courses/chat/Message.js","views/courses/chat/MessageAdd.js","views/courses/chat/ThreadDetails/index.js","views/courses/chat/ThreadNew/index.js","views/courses/chat/index.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","height","paddingLeft","spacing","paddingRight","Toolbar","className","rest","classes","clsx","Typography","variant","color","Box","flexGrow","IconButton","component","RouterLink","to","SvgIcon","fontSize","searchContainer","contactAvatar","width","ThreadList","contacts","useSelector","state","chat","mt","List","map","contactId","ListItem","button","key","id","ListItemAvatar","Avatar","src","avatar","ListItemText","primary","username","primaryTypographyProps","noWrap","role","new","Chip","size","icon","fontWeight","drawerDesktopRoot","flexShrink","drawerDesktopPaper","position","drawerMobilePaper","drawerMobileBackdrop","Sidebar","containerRef","dispatch","useDispatch","location","useLocation","sidebarOpen","useEffect","closeSidebar","pathname","content","options","suppressScrollX","Hidden","smDown","Drawer","paper","mdUp","open","onClose","style","zIndex","BackdropProps","ModalProps","container","current","marginBottom","image","cursor","maxWidth","Message","thread","name","useState","openedFile","setOpenedFile","sender","send","user","account","type","senderSelector","ml","bgcolor","py","px","borderRadius","boxShadow","Link","justifyContent","moment","savedAt","fromNow","large","backgroundColor","palette","background","default","padding","MessageAdd","disabled","add","enqueueSnackbar","useSnackbar","body","setBody","handleSend","a","userEmail","email","alt","Paper","p","Input","input","disableUnderline","fullWidth","value","onChange","event","persist","target","onKeyUp","keyCode","placeholder","Tooltip","title","onClick","defaultProps","flexDirection","dark","ThreadDetails","threads","messagesRef","useRef","_container","scrollTop","scrollHeight","Divider","ref","PerfectScrollbar","chating","length","_id","ThreadNew","smUp","menuButton","edge","openSidebar","overflow","socket","io","SOKET_SERVER","transports","ChatView","threadKey","useParams","pageRef","emit","off","on","getThreads","users","getContacts","Id","Page"],"mappings":"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","file":"static/js/53.f4a6ab17.chunk.js","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  IconButton,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport {\n  RefreshCw\n} from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 64,\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nfunction Toolbar({ className, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Typography\n        variant=\"h3\"\n        color=\"textPrimary\"\n      >\n        Chats\n      </Typography>\n      <Box flexGrow={1} />\n      <IconButton\n        component={RouterLink}\n        to=\"/app/courses/chat\"\n      >\n        <SvgIcon fontSize=\"small\">\n          <RefreshCw />\n        </SvgIcon>\n      </IconButton>\n    </div>\n  );\n}\n\nToolbar.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport {\n  Link as RouterLink\n} from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  useSelector\n} from 'react-redux';\nimport {\n  Avatar,\n  Box,\n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport{AlertCircle} from 'react-feather'\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  searchContainer: {\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1)\n  },\n  contactAvatar: {\n    height: 32,\n    width: 32\n  }\n}));\n\nfunction ThreadList({ className, ...rest }) {\n  const classes = useStyles();\n  const { contacts } = useSelector((state) => state.chat);\n\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n        <div className={classes.searchContainer}>\n\n          <Box mt={2}>\n            <Typography\n              variant=\"h6\"\n              color=\"textSecondary\"\n            >\n              Contacts\n            </Typography>\n            <List>\n              {contacts.map((contactId) => (\n                  <ListItem\n                    button\n                    component={RouterLink}\n                    key={contactId.id}\n                    to={`/app/courses/chat/${contactId.id}`}\n                  >\n                    <ListItemAvatar>\n                      <Avatar\n                        src={contactId.avatar}\n                        className={classes.contactAvatar}\n                      />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={contactId.username}\n                      primaryTypographyProps={{\n                        noWrap: true,\n                        variant: 'h6',\n                        color: 'textPrimary'\n                      }}\n                    />\n                      <ListItemText\n                      primary={contactId.role}\n                      primaryTypographyProps={{\n                        noWrap: true,\n                        variant: 'h6',\n                        color: 'textPrimary'\n                      }}\n                    />\n                    {(contactId.new) &&\n                   <Chip\n                      size=\"small\"\n                      icon={<AlertCircle color='red' fontWeight='bold'/>}                    \n                      // label=\"Updated\"\n                    />\n                  }\n                  </ListItem>         \n                ))}\n            </List>\n          </Box>\n\n        </div>\n    </div>\n  );\n}\n\nThreadList.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ThreadList;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux';\nimport {\n  Drawer,\n  Hidden,\n  makeStyles\n} from '@material-ui/core';\nimport { closeSidebar } from 'src/actions/chatActions';\nimport Toolbar from './Toolbar';\nimport ThreadList from './ThreadList';\n\nconst useStyles = makeStyles(() => ({\n  drawerDesktopRoot: {\n    width: 280,\n    flexShrink: 0\n  },\n  drawerDesktopPaper: {\n    position: 'relative'\n  },\n  drawerMobilePaper: {\n    position: 'relative',\n    width: 280\n  },\n  drawerMobileBackdrop: {\n    position: 'absolute'\n  }\n}));\n\nfunction Sidebar({ containerRef }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const { sidebarOpen } = useSelector((state) => state.chat);\n\n  const handleCloseSidebar = () => {\n    dispatch(closeSidebar());\n  };\n\n  useEffect(() => {\n    if (sidebarOpen) {\n      dispatch(closeSidebar());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]);\n\n  const content = (\n    <div>\n      <Toolbar />\n      <PerfectScrollbar options={{ suppressScrollX: true }}>\n        <ThreadList />\n      </PerfectScrollbar>\n    </div>\n  );\n\n  return (\n    <>\n      <Hidden smDown>\n        <Drawer\n          variant=\"permanent\"\n          classes={{\n            root: classes.drawerDesktopRoot,\n            paper: classes.drawerDesktopPaper\n          }}\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n      <Hidden mdUp>\n        <Drawer\n          variant=\"temporary\"\n          open={sidebarOpen}\n          onClose={handleCloseSidebar}\n          classes={{\n            paper: classes.drawerMobilePaper\n          }}\n          style={{ position: 'absolute', zIndex: 1200 }}\n          BackdropProps={{ classes: { root: classes.drawerMobileBackdrop } }}\n          ModalProps={{ container: () => containerRef.current }}\n        >\n          {content}\n        </Drawer>\n      </Hidden>\n    </>\n  );\n}\n\nSidebar.propTypes = {\n  containerRef: PropTypes.any\n};\n\nexport default Sidebar;\n","import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { Lightbox } from 'react-modal-image';\nimport {\n  Avatar,\n  Box,\n  Link,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\n\nfunction senderSelector(state, send, name, avatar) {\n  const { user } = state.account;\n\n\n  if (!send) {\n\n    return {\n      avatar: avatar,\n      name: name,\n      type: 'contact'\n    };\n  }\n\n  return {\n    avatar: user.avatar,\n    name: 'Me',\n    type: 'user'\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(2),\n    display: 'flex'\n  },\n  avatar: {\n    height: 32,\n    width: 32\n  },\n  image: {\n    cursor: 'pointer',\n    height: 'auto',\n    maxWidth: '100%',\n    width: 380\n  }\n}));\n\nfunction Message({\n  className,\n  thread,\n  name,\n  avatar,\n  ...rest\n}) {\n  const classes = useStyles();\n  const [openedFile, setOpenedFile] = useState(null);\n  const sender = useSelector((state) => senderSelector(state, thread.send, name, avatar));\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Box\n        display=\"flex\"\n        maxWidth={500}\n        ml={sender.type === 'user' ? 'auto' : 0}\n      >\n        <Avatar\n          className={classes.avatar}\n          src={sender.avatar}\n        />\n        <Box ml={2}>\n          <Box\n            bgcolor={sender.type === 'user' ? 'secondary.main' : 'background.default'}\n            color={sender.type === 'user' ? 'secondary.contrastText' : 'text.primary'}\n            py={1}\n            px={2}\n            borderRadius=\"borderRadius\"\n            boxShadow={1}\n          >\n            <Link\n              color=\"inherit\"\n              component={RouterLink}\n              to=\"#\"\n              variant=\"h6\"\n            >\n              {sender.name}\n            </Link>\n            <Box mt={1}>\n                <Typography\n                  color=\"inherit\"\n                  variant=\"body1\"\n                >\n                  {thread.content}\n                </Typography>\n            </Box>\n          </Box>\n          <Box\n            mt={1}\n            display=\"flex\"\n            justifyContent=\"flex-end\"\n          >\n            <Typography\n              noWrap\n              color=\"textSecondary\"\n              variant=\"caption\"\n            >\n              {moment(thread.savedAt).fromNow()}\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n      {openedFile && (\n        <Lightbox\n          large={openedFile}\n          onClose={() => setOpenedFile(null)}\n        />\n      )}\n    </div>\n  );\n}\n\nMessage.propTypes = {\n  className: PropTypes.string,\n  thread: PropTypes.object.isRequired\n};\n\nexport default Message;\n","import React, {  useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport {\n  Avatar,\n  Box,\n  IconButton,\n  Input,\n  Paper,\n  SvgIcon,\n  Tooltip,\n  makeStyles\n} from '@material-ui/core';\nimport { Send as SendIcon } from 'react-feather';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.default,\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(1, 2)\n  }\n}));\n\nfunction MessageAdd({\n  className,\n  disabled,\n  add,\n  ...rest\n}) {\n  const classes = useStyles();\n  const { user } = useSelector((state) => state.account);\n  const { enqueueSnackbar } = useSnackbar();\n  const [body, setBody] = useState('');\n\n  const handleChange = (event) => {\n    event.persist();\n    setBody(event.target.value);\n  };\n\n  const handleSend = async() => {\n    try {\n      if (!body) {\n        return;\n      } \n      const userEmail = user.email;\n\n     add(userEmail, body);\n      setBody('');\n\n    } catch (error) {\n      enqueueSnackbar('Ooops!', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleKeyUp = (event) => {\n    if (event.keyCode === 13) {\n      handleSend();\n    }\n  };\n\n  return (\n    <div\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Avatar\n        alt=\"Person\"\n        src={user.avatar}\n      />\n      <Paper\n        variant=\"outlined\"\n        component={Box}\n        flexGrow={1}\n        ml={2}\n        p={1}\n      >\n        <Input\n          className={classes.input}\n          disableUnderline\n          fullWidth\n          value={body}\n          onChange={handleChange}\n          onKeyUp={handleKeyUp}\n          placeholder=\"Leave a message\"\n        />\n      </Paper>\n      <Tooltip title=\"Send\">\n        <span>\n          <IconButton\n            color=\"secondary\"\n            disabled={!body || disabled}\n            onClick={handleSend}\n          >\n            <SvgIcon fontSize=\"small\">\n              <SendIcon />\n            </SvgIcon>\n          </IconButton>\n        </span>\n      </Tooltip>\n     \n    </div>\n  );\n}\n\nMessageAdd.propTypes = {\n  className: PropTypes.string,\n  disabled: PropTypes.bool\n};\n\nMessageAdd.defaultProps = {\n  className: '',\n  disabled: false\n};\n\nexport default MessageAdd;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport {\n  useSelector\n} from 'react-redux';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Divider,\n  makeStyles\n} from '@material-ui/core';\nimport Message from '../Message';\nimport MessageAdd from '../MessageAdd';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nfunction ThreadDetails({add}) {\n  const classes = useStyles();\n  const {threads} = useSelector((state) => state.chat);\n  const messagesRef = useRef(null);\n\n  function scrollMessagesToBottom() {\n    if (messagesRef.current) {\n      // eslint-disable-next-line no-underscore-dangle\n      messagesRef.current._container.scrollTop = messagesRef.current._container.scrollHeight;\n    }\n  }\n\n\n  useEffect(() => {\n    if (threads) {\n      scrollMessagesToBottom();\n    }\n    // eslint-disable-next-line\n  }, [threads]);\n\n  if (!threads) {\n    return null;\n  }\n\n  return (\n    <div className={classes.root}>\n      <Divider />\n      <Box\n        flexGrow={1}\n        p={2}\n        ref={messagesRef}\n        component={PerfectScrollbar}\n        options={{ suppressScrollX: true }}\n      >\n \n        {threads.chating.length > 0 && threads.chating.map((thread) => (\n          <Message\n            key={thread._id}\n            thread={thread}\n            name = {threads.name}\n            avatar = {threads.avatar}\n          />\n        ))}\n      </Box>\n      <Divider />\n      <MessageAdd add={add}/>\n    </div>\n  );\n}\n\nexport default ThreadDetails;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Divider,\n  Hidden,\n  IconButton,\n  SvgIcon,\n  makeStyles\n} from '@material-ui/core';\nimport { Menu as MenuIcon } from 'react-feather';\nimport { openSidebar } from 'src/actions/chatActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.background.dark\n  }\n}));\n\nfunction ThreadNew() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const handleOpenSidebar = () => {\n    dispatch(openSidebar());\n  };\n\n  return (\n    <div className={classes.root}>\n      <Hidden smUp>\n        <Box\n          px={2}\n          py={1}\n          bgcolor=\"background.default\"\n        >\n          <IconButton\n            className={classes.menuButton}\n            edge=\"start\"\n            onClick={handleOpenSidebar}\n          >\n            <SvgIcon fontSize=\"small\">\n              <MenuIcon />\n            </SvgIcon>\n          </IconButton>\n        </Box>\n        <Divider />\n      </Hidden>\n    </div>\n  );\n}\n\nexport default ThreadNew;\n","import React, {\n  useEffect,\n  useRef\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport { getContacts } from 'src/actions/chatActions';\nimport Sidebar from './Sidebar';\nimport ThreadDetails from './ThreadDetails';\nimport ThreadNew from './ThreadNew';\nimport { io } from 'socket.io-client';\nimport { SOKET_SERVER } from 'src/config';\nimport {getThreads} from 'src/actions/chatActions';\nimport { useSelector } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    display: 'flex',\n    overflow: 'hidden',\n    position: 'relative',\n    width:\"100%\"\n  }\n}));\n\n\nconst socket = io(SOKET_SERVER, {transports: ['websocket']});\n\nfunction ChatView() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { threadKey } = useParams();\n  const pageRef = useRef(null);\n  const {user} = useSelector((state) => state.account);\n  const userEmail = user.email\n\n \n \n   useEffect(() => {\n    if(threadKey)\n    {\n      socket.emit(\"thread\", {userEmail, threadKey});\n     }\n      \n   },[threadKey, userEmail])\n\n\nuseEffect(() => {\n  socket.emit(\"start\",(userEmail));\n},[userEmail])\n\n  socket.off('getThreads').on('getThreads',async function (threads) {    \n    await dispatch( getThreads(threads));\n    socket.emit(\"start\",(userEmail));\n  });\n\n  socket.off('getUsers').on('getUsers', function (users) { \n    dispatch( getContacts(users));\n  });\n\n  socket.off('findnew').on(\"findnew\",function (Id) { \n    if(Id === threadKey)\n   { \n    socket.emit(\"thread\", {userEmail, threadKey});\n   }\n   else\n    { socket.emit(\"start\",(userEmail));}\n  })\n\n  socket.off('added').on('added', function () { \n    socket.emit(\"thread\", {userEmail, threadKey});\n  });\n\n  const add = (userEmail,body) =>{\n    socket.emit(\"addMessage\", { userEmail, body, threadKey});\n  }\n\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"courses Chat\"\n      ref={pageRef}\n    >\n      <Sidebar containerRef={pageRef} />\n      {threadKey ? <ThreadDetails add={add}/> : <ThreadNew /> }\n    </Page>\n  );\n}\n\nexport default ChatView;\n"],"sourceRoot":""}